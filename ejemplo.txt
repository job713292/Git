
---

# ðŸ“Œ **Lista de comandos Git y GitHub**

## ðŸ”¹ 1. ConfiguraciÃ³n inicial

```bash
git config --global user.name "Tu Nombre"
git config --global user.email "tu@email.com"
git config --global core.editor "code --wait"   # Establecer VSCode como editor
git config --list                              # Ver configuraciÃ³n
```

---

## ðŸ”¹ 2. Crear y clonar repositorios

```bash
git init                                       # Crear repo nuevo en la carpeta actual
git clone URL                                  # Clonar repo remoto
git clone -b rama URL                          # Clonar una rama especÃ­fica
```

---

## ðŸ”¹ 3. Estados y cambios

```bash
git status                                     # Ver estado de los archivos
git add archivo.txt                            # AÃ±adir un archivo
git add .                                      # AÃ±adir todos los cambios
git reset archivo.txt                          # Quitar archivo del Ã¡rea de staging
git diff                                       # Ver cambios no preparados
git diff --staged                              # Ver cambios en staging
```

---

## ðŸ”¹ 4. Commits

```bash
git commit -m "Mensaje del commit"             # Commit con mensaje
git commit -am "Mensaje"                       # Add + commit en un solo paso (solo para archivos ya trackeados)
git commit --amend                             # Modificar el Ãºltimo commit
```

---

## ðŸ”¹ 5. Ramas (branches)

```bash
git branch                                     # Listar ramas locales
git branch -a                                  # Listar todas (locales + remotas)
git branch nombre-rama                         # Crear nueva rama
git checkout nombre-rama                       # Cambiar de rama
git checkout -b nombre-rama                    # Crear y moverse a la rama
git switch nombre-rama                         # Cambiar de rama (forma moderna)
git switch -c nombre-rama                      # Crear y cambiar
git branch -d nombre-rama                      # Eliminar rama local
git push origin --delete nombre-rama           # Eliminar rama remota
```

---

## ðŸ”¹ 6. Fusionar y rebase

```bash
git merge nombre-rama                          # Fusionar rama con la actual
git rebase nombre-rama                         # Reaplicar commits sobre otra rama
git rebase --continue                          # Continuar rebase despuÃ©s de resolver conflictos
git rebase --abort                             # Cancelar rebase
```

---

## ðŸ”¹ 7. Remote (GitHub)

```bash
git remote -v                                  # Ver repos remotos
git remote add origin URL                      # Conectar repo local con remoto
git remote remove origin                       # Eliminar remoto
git fetch origin                               # Descargar ramas remotas sin mezclar
git pull origin main                           # Descargar y fusionar cambios de main
git push origin main                           # Subir commits a remoto
git push -u origin main                        # Subir rama y establecer upstream
```

---

## ðŸ”¹ 8. Etiquetas (tags)

```bash
git tag                                        # Listar tags
git tag v1.0                                   # Crear tag ligero
git tag -a v1.0 -m "VersiÃ³n 1.0"               # Crear tag anotado
git push origin v1.0                           # Subir tag
git push origin --tags                         # Subir todos los tags
git tag -d v1.0                                # Borrar tag local
git push origin :refs/tags/v1.0                # Borrar tag remoto
```

---

## ðŸ”¹ 9. Guardar cambios temporales (stash)

```bash
git stash                                      # Guardar cambios sin commit
git stash list                                 # Listar stashes
git stash apply                                # Aplicar Ãºltimo stash
git stash pop                                  # Aplicar y borrar stash
git stash drop                                 # Borrar stash especÃ­fico
```

---

## ðŸ”¹ 10. Deshacer cambios

```bash
git checkout -- archivo.txt                    # Descartar cambios en un archivo
git reset --soft HEAD~1                        # Deshacer Ãºltimo commit, manteniendo cambios
git reset --hard HEAD~1                        # Deshacer Ãºltimo commit y borrar cambios
git revert ID_COMMIT                           # Revertir un commit sin borrar historial
```

---

## ðŸ”¹ 11. Logs e historial

```bash
git log                                        # Ver historial
git log --oneline                              # Resumen en una lÃ­nea
git log --graph --oneline --all                # Historial en forma de grafo
git show ID_COMMIT                             # Ver detalles de un commit
```

---

## ðŸ”¹ 12. GitHub (via CLI `gh`)

*(Necesitas instalar GitHub CLI â†’ [gh CLI](https://cli.github.com/))*

```bash
gh auth login                                  # Iniciar sesiÃ³n en GitHub
gh repo create                                 # Crear repo en GitHub
gh repo clone usuario/repositorio              # Clonar repo desde GitHub
gh issue list                                  # Listar issues
gh pr create                                   # Crear pull request
gh pr list                                     # Listar pull requests
gh pr merge NUMERO                             # Hacer merge de un PR
```

---

## ðŸ”¹ 13. Otros Ãºtiles

```bash
git fetch --all                                # Traer todas las ramas remotas
git clean -f                                   # Eliminar archivos no trackeados
git gc                                         # Optimizar repositorio
git shortlog -s -n                             # Ver contribuciones por autor
```
